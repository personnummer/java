plugins {
    id 'maven-publish'
    id 'java-library'
    id 'java'
    id 'signing'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.2', 'org.json:json:20231013')
}

version = System.getenv("RELEASE_VERSION") ?: 'NONE'
group 'dev.personnummer'

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar, jar
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/personnummer/java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
        maven {
            name = "OSSRH"
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        mavenJava (MavenPublication) {
            version = System.getenv("RELEASE_VERSION")
            groupId = 'dev.personnummer'
            from components.java
            pom {
                name = 'Personnummer'
                description = 'personnummer is a small open-source project that validates, formatting and determine sex and age from swedish personal identity numbers'
                url = 'https://personnummer.dev'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        id = 'jite'
                        name = 'Johannes Tegn√©r'
                        email = 'johannes@jitesoft.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:personnummer/java.git'
                    url = 'https://github.com/personnummer/java'
                }
            }
        }
    }
}

signing {
    def signingKeyId = "5E695E6A"
    def signingKey = findProperty("signingKey") ?: "key"
    def signingPassword = findProperty("signingPassword") ?: "pass"
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { version != "NONE" }
}
