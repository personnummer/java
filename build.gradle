plugins {
    id 'maven-publish'
    id 'java-library'
    id 'java'
    id 'maven'
    id 'signing'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.7.0')
    testCompile('org.junit.jupiter:junit-jupiter:5.6.2', "org.json:json:20200518")
}

version = System.getenv("RELEASE_VERSION") ?: 'NONE'

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar, jar
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/personnummer/java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
        maven {
            name = "OSSRH"
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        mavenJava (MavenPublication) {
            version = System.getenv("RELEASE_VERSION")
            groupId = 'dev.personnummer'
            from components.java
            pom {
                name = 'Personnummer'
                description = ''
                url = 'https://personnummer.dev'
                licenses {
                    license {
                        name = 'MIT'
                    }
                }
            }
        }
    }
}

signing {
    required { version != "NONE" }
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { version != "NONE" } // so we can build jars for testing in CI
}
